# Offensive-Security-OSCP-by-Offensive-Security_2020
# page 236 - 239

# # this vulnerability scanning is same method as like an idea using Nessus open source applications. Using the Nmap scripting ENGINE (NSE) for perform automated vulnerability scanning. When NSE is not a full-fledged vulnerability scanner, it does have respectbale library of scripts that will be used to detect and validate vulnerabilities.

# NSE scripts are written by Lue and range in functionality from the brute force and authentication to detecting and exploiting vulnerabilities. This pratices will focus on the scripts in the "vuln" and the "exploit" categories, as detects a vulnerability and the latter attempts to exploit it.

# Never run NSE scripts blindly. Take time to inspect them to understand what they do before running them, and test on your own targets whenever possible

# On Kali Linux the distribution, the NSE scripts can be found in the path '/usr/share/nmap/scripts/' directory. 

# command on linux trying to find of something any of the *.nse files in a text editor will shows the source of each script in a simple human-readable format.

# This folder also contains a script.db file that will serves as an index of all of the scripts. It is categorized each of the Nmap scripts. For example use the file to grep for scripts in the "vuln" and "exploit" cateogireas as show in List Listing 278;

┌──(kali㉿kali)-[/usr/share/nmap/scripts]
└─$ head -n 5 script.db 
Entry { filename = "acarsd-info.nse", categories = { "discovery", "safe", } }
Entry { filename = "address-info.nse", categories = { "default", "safe", } }
Entry { filename = "afp-brute.nse", categories = { "brute", "intrusive", } }
Entry { filename = "afp-ls.nse", categories = { "discovery", "safe", } }
Entry { filename = "afp-path-vuln.nse", categories = { "exploit", "intrusive", "vuln", } }
                                                                                        

┌──(kali㉿kali)-[/usr/share/nmap/scripts]
└─$ cat script.db | grep '"vuln\|exploit"'
Entry { filename = "afp-path-vuln.nse", categories = { "exploit", "intrusive", "vuln", } }
Entry { filename = "broadcast-avahi-dos.nse", categories = { "broadcast", "dos", "intrusive", "vuln", } }
Entry { filename = "clamav-exec.nse", categories = { "exploit", "vuln", } }
Entry { filename = "distcc-cve2004-2687.nse", categories = { "exploit", "intrusive", "vuln", } }
Entry { filename = "dns-update.nse", categories = { "intrusive", "vuln", } }
Entry { filename = "firewall-bypass.nse", categories = { "intrusive", "vuln", } }
Entry { filename = "ftp-libopie.nse", categories = { "intrusive", "vuln", } }
Entry { filename = "ftp-proftpd-backdoor.nse", categories = { "exploit", "intrusive", "malware", "vuln", } }
Entry { filename = "ftp-vsftpd-backdoor.nse", categories = { "exploit", "intrusive", "malware", "vuln", } }
Entry { filename = "ftp-vuln-cve2010-4221.nse", categories = { "intrusive", "vuln", } }
Entry { filename = "http-adobe-coldfusion-apsa1301.nse", categories = { "exploit", "vuln", } }
Entry { filename = "http-aspnet-debug.nse", categories = { "discovery", "vuln", } }
Entry { filename = "http-avaya-ipoffice-users.nse", categories = { "exploit", "vuln", } }
Entry { filename = "http-awstatstotals-exec.nse", categories = { "exploit", "intrusive", "vuln", } }
Entry { filename = "http-axis2-dir-traversal.nse", categories = { "exploit", "intrusive", "vuln", } }
Entry { filename = "http-barracuda-dir-traversal.nse", categories = { "auth", "exploit", "intrusive", } }
............
Entry { filename = "http-vuln-cve2017-8917.nse", categories = { "intrusive", "vuln", } }
Entry { filename = "http-vuln-misfortune-cookie.nse", categories = { "intrusive", "vuln", } }
Entry { filename = "http-vuln-wnr1000-creds.nse", categories = { "exploit", "intrusive", "vuln", } }
Entry { filename = "http-wordpress-users.nse", categories = { "auth", "intrusive", "vuln", } }
Entry { filename = "ipmi-cipher-zero.nse", categories = { "safe", "vuln", } }


##############
# Next command and will show try to use NSE to detect a vulnerability. For example using by (--script vuln) to run all scripts in the "vuln" category against a target as Badstore 

┌──(kali㉿kali)-[~]
└─$ sudo nmap --script vuln 85.237.116.187                                      
[sudo] password for kali: 
Starting Nmap 7.93 ( https://nmap.org ) at 2024-01-06 13:14 EET
Nmap scan report for 85.237.116.187
Host is up (0.0049s latency).
Not shown: 997 closed tcp ports (reset)
PORT     STATE SERVICE
80/tcp   open  http
| http-enum: 
|   /backup/: Backup folder w/ directory listing
|   /robots.txt: Robots file
|   /icons/: Potentially interesting directory w/ listing on 'apache/1.3.28'
|   /images/: Potentially interesting directory w/ listing on 'apache/1.3.28'
|_  /supplier/: Potentially interesting directory w/ listing on 'apache/1.3.28'
| http-fileupload-exploiter: 
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.                                                                                                       
|                                                                                                                                            
|     Couldn't find a file-type field.                                                                                                       
|                                                                                                                                            
|     Couldn't find a file-type field.                                                                                                       
|                                                                                                                                            
|     Couldn't find a file-type field.                                                                                                       
|                                                                                                                                            
|     Couldn't find a file-type field.                                                                                                       
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Failed to upload and execute a payload.
|   
|     Failed to upload and execute a payload.
|   
|_    Failed to upload and execute a payload.
|_http-stored-xss: Couldn't find any stored XSS vulnerabilities.
|_http-trace: TRACE is enabled
| http-csrf: 
| Spidering limited to: maxdepth=3; maxpagecount=20; withinhost=85.237.116.187
|   Found the following possible CSRF vulnerabilities: 
|     
|     Path: http://85.237.116.187:80/cgi-bin/badstore.cgi?action=whatsnew
|     Form id: 
|     Form action: /cgi-bin/badstore.cgi?action=cartadd
|     
|     Path: http://85.237.116.187:80/cgi-bin/badstore.cgi?action=loginregister
|     Form id: 
|     Form action: /cgi-bin/badstore.cgi?action=login
|     
|     Path: http://85.237.116.187:80/cgi-bin/badstore.cgi?action=loginregister
|     Form id: 
|     Form action: /cgi-bin/badstore.cgi?action=register
|     
|     Path: http://85.237.116.187:80/cgi-bin/badstore.cgi?action=supplierlogin
|     Form id: 
|     Form action: /cgi-bin/badstore.cgi?action=supplierportal
|     
|     Path: http://85.237.116.187:80/cgi-bin/badstore.cgi?action=myaccount
|     Form id: 
|     Form action: /cgi-bin/badstore.cgi?action=moduser
|     
|     Path: http://85.237.116.187:80/cgi-bin/badstore.cgi?action=supplierportal
|     Form id: 
|_    Form action: /cgi-bin/badstore.cgi?action=supupload
|_http-dombased-xss: Couldn't find any DOM based XSS.
443/tcp  open  https
| ssl-poodle: 
|   VULNERABLE:
|   SSL POODLE information leak
|     State: VULNERABLE
|     IDs:  CVE:CVE-2014-3566  BID:70574
|           The SSL protocol 3.0, as used in OpenSSL through 1.0.1i and other
|           products, uses nondeterministic CBC padding, which makes it easier
|           for man-in-the-middle attackers to obtain cleartext data via a
|           padding-oracle attack, aka the "POODLE" issue.
|     Disclosure date: 2014-10-14
|     Check results:
|       TLS_RSA_WITH_AES_128_CBC_SHA
|     References:
|       https://www.securityfocus.com/bid/70574
|       https://www.openssl.org/~bodo/ssl-poodle.pdf
|       https://www.imperialviolet.org/2014/10/14/poodle.html
|_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-3566
| http-fileupload-exploiter: 
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Couldn't find a file-type field.
|   
|     Failed to upload and execute a payload.
|   
|     Failed to upload and execute a payload.
|   
|_    Failed to upload and execute a payload.
|_http-stored-xss: Couldn't find any stored XSS vulnerabilities.
| ssl-ccs-injection: 
|   VULNERABLE:
|   SSL/TLS MITM vulnerability (CCS Injection)
|     State: VULNERABLE
|     Risk factor: High
|       OpenSSL before 0.9.8za, 1.0.0 before 1.0.0m, and 1.0.1 before 1.0.1h
|       does not properly restrict processing of ChangeCipherSpec messages,
|       which allows man-in-the-middle attackers to trigger use of a zero
|       length master key in certain OpenSSL-to-OpenSSL communications, and
|       consequently hijack sessions or obtain sensitive information, via
|       a crafted TLS handshake, aka the "CCS Injection" vulnerability.
|           
|     References:
|       http://www.openssl.org/news/secadv_20140605.txt
|       http://www.cvedetails.com/cve/2014-0224
|_      https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0224
| http-csrf: 
| Spidering limited to: maxdepth=3; maxpagecount=20; withinhost=85.237.116.187
|   Found the following possible CSRF vulnerabilities: 
|     
|     Path: https://85.237.116.187:443/cgi-bin/badstore.cgi?action=whatsnew
|     Form id: 
|     Form action: /cgi-bin/badstore.cgi?action=cartadd
|     
|     Path: https://85.237.116.187:443/cgi-bin/badstore.cgi?action=loginregister
|     Form id: 
|     Form action: /cgi-bin/badstore.cgi?action=login
|     
|     Path: https://85.237.116.187:443/cgi-bin/badstore.cgi?action=loginregister
|     Form id: 
|     Form action: /cgi-bin/badstore.cgi?action=register
|     
|     Path: https://85.237.116.187:443/cgi-bin/badstore.cgi?action=supplierlogin
|     Form id: 
|     Form action: /cgi-bin/badstore.cgi?action=supplierportal
|     
|     Path: https://85.237.116.187:443/cgi-bin/badstore.cgi?action=myaccount
|     Form id: 
|     Form action: /cgi-bin/badstore.cgi?action=moduser
|     
|     Path: https://85.237.116.187:443/cgi-bin/badstore.cgi?action=supplierportal
|     Form id: 
|_    Form action: /cgi-bin/badstore.cgi?action=supupload
| ssl-dh-params: 
|   VULNERABLE:
|   Transport Layer Security (TLS) Protocol DHE_EXPORT Ciphers Downgrade MitM (Logjam)
|     State: VULNERABLE
|     IDs:  CVE:CVE-2015-4000  BID:74733
|       The Transport Layer Security (TLS) protocol contains a flaw that is
|       triggered when handling Diffie-Hellman key exchanges defined with
|       the DHE_EXPORT cipher. This may allow a man-in-the-middle attacker
|       to downgrade the security of a TLS session to 512-bit export-grade
|       cryptography, which is significantly weaker, allowing the attacker
|       to more easily break the encryption and monitor or tamper with
|       the encrypted stream.
|     Disclosure date: 2015-5-19
|     Check results:
|       EXPORT-GRADE DH GROUP 1
|             Cipher Suite: TLS_DHE_RSA_EXPORT_WITH_DES40_CBC_SHA
|             Modulus Type: Safe prime
|             Modulus Source: mod_ssl 2.0.x/512-bit MODP group with safe prime modulus
|             Modulus Length: 512
|             Generator Length: 8
|             Public Key Length: 512
|     References:
|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-4000
|       https://www.securityfocus.com/bid/74733
|       https://weakdh.org
|   
|   Diffie-Hellman Key Exchange Insufficient Group Strength
|     State: VULNERABLE
|       Transport Layer Security (TLS) services that use Diffie-Hellman groups
|       of insufficient strength, especially those using one of a few commonly
|       shared groups, may be susceptible to passive eavesdropping attacks.
|     Check results:
|       WEAK DH GROUP 1
|             Cipher Suite: TLS_DHE_RSA_WITH_3DES_EDE_CBC_SHA
|             Modulus Type: Safe prime
|             Modulus Source: mod_ssl 2.0.x/1024-bit MODP group with safe prime modulus
|             Modulus Length: 1024
|             Generator Length: 8
|             Public Key Length: 1024
|     References:
|_      https://weakdh.org
|_http-trace: TRACE is enabled
|_sslv2-drown: ERROR: Script execution failed (use -d to debug)
|_http-dombased-xss: Couldn't find any DOM based XSS.
| http-enum: 
|   /backup/: Backup folder w/ directory listing
|   /robots.txt: Robots file
|   /icons/: Potentially interesting directory w/ listing on 'apache/1.3.28'
|   /images/: Potentially interesting directory w/ listing on 'apache/1.3.28'
|_  /supplier/: Potentially interesting directory w/ listing on 'apache/1.3.28'
3306/tcp open  mysql
| mysql-vuln-cve2012-2122: 
|   VULNERABLE:
|   Authentication bypass in MySQL servers.
|     State: VULNERABLE (Exploitable)
|     IDs:  CVE:CVE-2012-2122
|       When a user connects to MariaDB/MySQL, a token (SHA
|       over a password and a random scramble string) is calculated and compared
|       with the expected value. Because of incorrect casting, it might've
|       happened that the token and the expected value were considered equal,
|       even if the memcmp() returned a non-zero value. In this case
|       MySQL/MariaDB would think that the password is correct, even while it is
|       not.  Because the protocol uses random strings, the probability of
|       hitting this bug is about 1/256.
|       Which means, if one knows a user name to connect (and "root" almost
|       always exists), she can connect using *any* password by repeating
|       connection attempts. ~300 attempts takes only a fraction of second, so
|       basically account password protection is as good as nonexistent.
|       
|     Disclosure date: 2012-06-9
|     Extra information:
|       Server granted access at iteration #1500
|   
|     References:
|       http://seclists.org/oss-sec/2012/q2/493
|       https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-2122
|_      https://community.rapid7.com/community/metasploit/blog/2012/06/11/cve-2012-2122-a-tragically-comedic-security-flaw-in-mysql
MAC Address: 00:0C:29:33:A0:BB (VMware)

Nmap done: 1 IP address (1 host up) scanned in 317.30 seconds
                                                                                                                                             
┌──(kali㉿kali)-[~]

# so result gave at --> Authentication bypass in MySQL servers. State: VULNERABLE (Exploitable) is might be the threat one. This is rather interesting and worth further investigation, and the "CVE:CVE-2012-2122" .nse script successfully detect the MySQL Server

# The Nmap is not a vulnerability scanner, but it can very useful for similar tasks. It can use namp during a penetration test to verify vulnerability scanner results, to servera as a backup to a purpose-built scanner, and to help reduce false positives results.

# Nmap also requires heeding the same warnings applicable to traditional vulnerability scanners. Most import to understans is the scripts will and will not check for, the amount of traffic the scripts will generate and what potential dangers will may incur with each scripts.




