# harjoitus; https://edu.anarcho-copy.org/Against%20Security%20-%20Self%20Security/Offensive%20Security%20-%20Pentesting%20with%20Kali%20(PWK).pdf
# chapter 6. - Buffer Overflows
# sivu START HERE: 148 - 153

# samat harjoitukset ja kuvaukset; https://github.com/muckitymuck/OSCP-Study-Guide/blob/master/buffer_overflow/buffer_overflows.md

#######################################################################################################
####### Buffer Overflows ##########

suomeksi; https://fi.wikipedia.org/wiki/Puskurin_ylivuotovirhe

#There are three main ways of identifying flaws in applications
    # If the source code of the application is available, then source code review is probably the easiest way to identify bugs.
    # If the application is closed source, you can use reverse engineering techniques, or fuzzing, to find bugs.

# Puskurin ylivuoto (butter overflows)
  # Usein on aina kiehtovaa ajatella/mietiä tarkkoja toimenpiteitä, joita tapahtuu, kun hyväksikäyttöä käytetään koodin suorittamista etänä uhrinkoneelle 

# Usein kun suoritettaan jokin puskurin ylivuoto, joihin usein mietittään ensimmäisenä "miten nämä virheet löydetään?" ja "Mistä tiesit, että x bytes ja Y komento kataa sovelluksen ja johtaa puskurin ylivuotoa?"

# Yleisen sovellusten puutteiden tunnistamisessa on kolme tapaa.
  # Jos sovelluksen lähdekoodi on saatavilla, lähdekoodi tarkistus on luultavasti helpoin tapa tunnistaa vikoja
  # Jos sovellus on suljetun lähde koodi (application is closed source), voidaan käyttää käänteissuunnittelutekniikoita (reverse engineering techniques), tai sumeaa vikoja etsimisessä

######################
#### Fuzzing #######

# Fuzzing tarkoittaa virheellisten tietojen lähettämistä sovelluksen syötteeseen ja odottamattomien kaatumisten tarkkailua. 
# Odottamaton kaatuminen osoittaa, että sovellus ei ehkä suodata tiettyä syötettä oikein. 
# Tämä voi johtaa hyödynnettävän haavoittuvuuden löytämiseen.

 Fuzzing involves sending malformed data into application input and watching for unexpected crashes.
 An unexpected crash indicates that the application might not filter certain input correctly. 
 This could lead to discovering an exploitable vulnerability.

####### A Word About DEP and ASLR  #######

 DEP (Data Execution Prevention) is a set of hardware, and software, technologies that perform additional checks on memory, to help prevent malicious code from running on a system.

 The primary benefit of DEP is to help prevent code execution from data pages, by raising an exception, when execution occurs.

 ASLR (Address Space Layout Randomization) randomizes the base addresses of loaded applications, and DLLs, every time the Operating System is booted.

############################
### Interacting with the POP3 Protocol ####

Jos tutkittavat protokolla on käyttäjille tuntematon, niin etsitettävä protokollanmuoto tapahtuu RFC tai Wireshark työkalun käyttö

Myös harjoituksissa / teoriassa on käytetty/suoritettu netcat -yhteyden käytöä Python scriptillä, ja joka toimii seuraavasti:

#!/usr/bin/python
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
  print "\nSending vil buffer..."
  s.connect(('10.0.0.22',110))     #connect to IP, POP3 port
  data = s.recv(1024)     # receive banner
  print data     # print banner

  s.send('USER   test' +'\r\n')     # end username "test"
  data = s.recv(1024)     # receive reply
  print data     # print reply

  s.send('PASS test\r\n')     # send password "test"
  data = s.recv(1024)     # receive reply
  print data     # print reply

  s.close()     # close socket
  print "\nDone!"

except:
  print "Could not connect to POP3!”

####

Toinen, joka tämä on yksinkertaisempi scripti ottaminen ja sen muokkaaminen sumeamaksi salsanakenttään kirjauttumisenprosessin aikana on helppompaa. 
Ja tämä on myös python scripti


#!/usr/bin/python
import socket
s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

try:
  print "\nSending vil buffer..."
  s.connect(('10.0.0.22',110))     #connect to IP, POP3 port
  data = s.recv(1024)     # receive banner
  print data     # print banner

  s.send('USER   test' +'\r\n')     # end username "test"
  data = s.recv(1024)     # receive reply
  print data     # print reply

  s.send('PASS test\r\n')     # send password "test"
  data = s.recv(1024)     # receive reply
  print data     # print reply

  s.close()     # close socket
  print "\nDone!"

except:
  print "Could not connect to POP3!”

#####



